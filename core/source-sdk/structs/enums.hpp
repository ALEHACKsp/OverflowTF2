#pragma once


enum vgui_panel
{
	ROOT = 0,
	GAMEUIDLL,
	CLIENTDLL,
	TOOLS,
	INGAMESCREENS,
	GAMEDLL,
	CLIENTDLL_TOOLS
};

enum paint_mode
{
	UIPANELS = (1 << 0),
	INGAMEPANELS = (1 << 1),
	CURSOR = (1 << 2)
};

enum font_flags
{
	NONE,
	ITALIC = 0x001,
	UNDERLINE = 0x002,
	STRIKEOUT = 0x004,
	SYMBOL = 0x008,
	ANTIALIAS = 0x010,
	GAUSSIANBLUR = 0x020,
	ROTARY = 0x040,
	DROPSHADOW = 0x080,
	ADDITIVE = 0x100,
	OUTLINE = 0x200,
	CUSTOM = 0x400,
};

enum conditions
{
	SLOWED = (1 << 0), //TOGGLED WHEN A PLAYER IS SLOWED DOWN. 
	ZOOMED = (1 << 1), //TOGGLED WHEN A PLAYER IS ZOOMED. 
	DISGUISING = (1 << 2), //TOGGLED WHEN A SPY IS DISGUISING.  
	DISGUISED = (1 << 3), //TOGGLED WHEN A SPY IS DISGUISED. 
	CLOAKED = (1 << 4), //TOGGLED WHEN A SPY IS INVISIBLE. 
	UBERCHARGED = (1 << 5), //TOGGLED WHEN A PLAYER IS �BERCHARGED. 
	TELEPORTEDGLOW = (1 << 6), //TOGGLED WHEN SOMEONE LEAVES A TELEPORTER AND HAS GLOW BENEATH THEIR FEET. 
	TAUNTING = (1 << 7), //TOGGLED WHEN A PLAYER IS TAUNTING. 
	UBERCHARGEFADING = (1 << 8), //TOGGLED WHEN THE �BERCHARGE IS FADING. 
	CLOAKFLICKER = (1 << 9), //TOGGLED WHEN A SPY IS VISIBLE DURING CLOAK. 
	TELEPORTING = (1 << 10), //ONLY ACTIVATES FOR A BRIEF SECOND WHEN THE PLAYER IS BEING TELEPORTED; NOT VERY USEFUL. 
	KRITZKRIEGED = (1 << 11), //TOGGLED WHEN A PLAYER IS BEING CRIT BUFFED BY THE KRITZKRIEG. 
	TMPDAMAGEBONUS = (1 << 12), //UNKNOWN WHAT THIS IS FOR. NAME TAKEN FROM THE ALLIEDMODDERS SDK. 
	DEADRINGERED = (1 << 13), //TOGGLED WHEN A PLAYER IS TAKING REDUCED DAMAGE FROM THE DEADRINGER. 
	BONKED = (1 << 14), //TOGGLED WHEN A PLAYER IS UNDER THE EFFECTS OF THE BONK! ATOMIC PUNCH. 
	STUNNED = (1 << 15), //TOGGLED WHEN A PLAYER'S SPEED IS REDUCED FROM AIRBLAST OR A SANDMAN BALL. 
	BUFFED = (1 << 16), //TOGGLED WHEN A PLAYER IS WITHIN RANGE OF AN ACTIVATED BUFF BANNER. 
	CHARGING = (1 << 17), //TOGGLED WHEN A DEMOMAN CHARGES WITH THE SHIELD. 
	DEMOBUFF = (1 << 18), //TOGGLED WHEN A DEMOMAN HAS HEADS FROM THE EYELANDER. 
	CRITCOLA = (1 << 19), //TOGGLED WHEN THE PLAYER IS UNDER THE EFFECT OF THE CRIT-A-COLA. 
	INHEALRADIUS = (1 << 20), //UNUSED CONDITION, NAME TAKEN FROM ALLIEDMODDERS SDK. 
	HEALING = (1 << 21), //TOGGLED WHEN SOMEONE IS BEING HEALED BY A MEDIC OR A DISPENSER. 
	ONFIRE = (1 << 22), //TOGGLED WHEN A PLAYER IS ON FIRE. 
	OVERHEALED = (1 << 23), //TOGGLED WHEN A PLAYER HAS >100% HEALTH. 
	JARATED = (1 << 24), //TOGGLED WHEN A PLAYER IS HIT WITH A SNIPER'S JARATE. 
	BLEEDING = (1 << 25), //TOGGLED WHEN A PLAYER IS TAKING BLEEDING DAMAGE. 
	DEFENSEBUFFED = (1 << 26), //TOGGLED WHEN A PLAYER IS WITHIN RANGE OF AN ACTIVATED BATTALION'S BACKUP. 
	MILKED = (1 << 27), //PLAYER WAS HIT WITH A JAR OF MAD MILK. 
	MEGAHEAL = (1 << 28), //PLAYER IS UNDER THE EFFECT OF QUICK-FIX CHARGE. 
	REGENBUFFED = (1 << 29), //TOGGLED WHEN A PLAYER IS WITHIN A CONCHEROR'S RANGE. 
	MARKEDFORDEATH = (1 << 30), //PLAYER IS MARKED FOR DEATH BY A FAN O'WAR HIT. EFFECTS ARE SIMILAR TO JARATED. 
	NOHEALINGDAMAGEBUFF = (1 << 31), //UNKNOWN WHAT THIS IS USED FOR.

	SPEEDBUFFALLY = (1 << 0), //TOGGLED WHEN A PLAYER GETS HIT WITH THE DISCIPLINARY ACTION. 
	HALLOWEENCRITCANDY = (1 << 1), //ONLY FOR SCREAM FORTRESS EVENT MAPS THAT DROP CRIT CANDY. 
	CRITCANTEEN = (1 << 2), //PLAYER IS GETTING A CRIT BOOST FROM A MVM CANTEEN.
	CRITDEMOCHARGE = (1 << 3), //FROM DEMO'S SHIELD
	CRITHYPE = (1 << 4), //SODA POPPER CRITS. 
	CRITONFIRSTBLOOD = (1 << 5), //ARENA FIRST BLOOD CRIT BUFF. 
	CRITONWIN = (1 << 6), //END OF ROUND CRITS. 
	CRITONFLAGCAPTURE = (1 << 7), //CTF INTELLIGENCE CAPTURE CRITS. 
	CRITONKILL = (1 << 8), //UNKNOWN WHAT THIS IS FOR. 
	RESTRICTTOMELEE = (1 << 9), //UNKNOWN WHAT THIS IS FOR. 
	DEFENSEBUFFNOCRITBLOCK = (1 << 10), //MVM BUFF.
	REPROGRAMMED = (1 << 11), //MVM BOT HAS BEEN REPROGRAMMED.
	PYROCRITS = (1 << 12), //PLAYER IS GETTING CRITS FROM THE MMMPH CHARGE. 
	PYROHEAL = (1 << 13), //PLAYER IS BEING HEALED FROM THE MMMPH CHARGE. 
	FOCUSBUFF = (1 << 14), //PLAYER IS GETTING A FOCUS BUFF.
	DISGUISEDREMOVED = (1 << 15), //DISGUISED REMOVE FROM A BOT.
	MARKEDFORDEATHSILENT = (1 << 16), //PLAYER IS UNDER THE EFFECTS OF THE ESCAPE PLAN/EQUALIZER OR GRU.
	DISGUISEDASDISPENSER = (1 << 17), //BOT IS DISGUISED AS DISPENSER.
	SAPPED = (1 << 18), //MVM BOT IS BEING SAPPED.
	UBERCHARGEDHIDDEN = (1 << 19), //MVM RELATED
	UBERCHARGEDCANTEEN = (1 << 20), //PLAYER IS RECEIVING �BERCHARGE FROM A CANTEEN.
	HALLOWEENBOMBHEAD = (1 << 21), //PLAYER HAS A BOMB ON THEIR HEAD FROM MERASMUS.
	HALLOWEENTHRILLER = (1 << 22), //PLAYERS ARE FORCED TO DANCE FROM MERASMUS.
	BULLETCHARGE = (1 << 26), //PLAYER IS RECEIVING 75% REDUCED DAMAGE FROM BULLETS.
	EXPLOSIVECHARGE = (1 << 27), //PLAYER IS RECEIVING 75% REDUCED DAMAGE FROM EXPLOSIVES.
	FIRECHARGE = (1 << 28), //PLAYER IS RECEIVING 75% REDUCED DAMAGE FROM FIRE.
	BULLETRESISTANCE = (1 << 29), //PLAYER IS RECEIVING 10% REDUCED DAMAGE FROM BULLETS.
	EXPLOSIVERESISTANCE = (1 << 30), //PLAYER IS RECEIVING 10% REDUCED DAMAGE FROM EXPLOSIVES.
	FIRERESISTANCE = (1 << 31), //PLAYER IS RECEIVING 10% REDUCED DAMAGE FROM FIRE.

	STEALTHED = (1 << 0),
	MEDIGUNDEBUFF = (1 << 1),
	STEALTHEDUSERBUFFFADE = (1 << 2),
	BULLETIMMUNE = (1 << 3),
	BLASTIMMUNE = (1 << 4),
	FIREIMMUNE = (1 << 5),
	PREVENTDEATH = (1 << 6),
	MVMBOTRADIOWAVE = (1 << 7),
	HALLOWEENSPEEDBOOST = (1 << 8), //WHEEL HAS GRANTED PLAYER SPEED BOOST.
	HALLOWEENQUICKHEAL = (1 << 9), //WHEEL HAS GRANTED PLAYER QUICK HEAL.
	HALLOWEENGIANT = (1 << 10), //WHEEL HAS GRANTED PLAYER GIANT MODE.
	HALLOWEENTINY = (1 << 11), //WHEEL HAS GRANTED PLAYER TINY MODE.
	HALLOWEENINHELL = (1 << 12), //WHEEL HAS GRANTED PLAYER IN HELL MODE.
	HALLOWEENGHOSTMODE = (1 << 13), //WHEEL HAS GRANTED PLAYER GHOST MODE.
	PARACHUTE = (1 << 16), //PLAYER HAS DEPLOYED THE BASE JUMPER.
	BLASTJUMPING = (1 << 17), //PLAYER HAS STICKY OR ROCKET JUMPED.

	MINICRITS = (BUFFED | CRITCOLA),
	IGNORESTATES = (UBERCHARGED | BONKED),
	IGNORESTATES_PYRO = (PYROHEAL)
};

enum classes
{
	SCOUT = 1,
	SOLDIER = 3,
	PYRO = 7,
	DEMOMAN = 4,
	HEAVY = 6,
	ENGINEER = 9,
	MEDIC = 5,
	SNIPER = 2,
	SPY = 8,
};

enum life_states
{
	ALIVE,
	DYING,
	DEAD,
	RESPAWNABLE,
	DISCARDBODY,
};

enum entity_flags : int
{
	GROUND = (1 << 0),
	DUCKING = (1 << 1),
	WATERJUMP = (1 << 2),
	ONTRAIN = (1 << 3),
	INRAIN = (1 << 4),
	FROZEN = (1 << 5),
	ATCONTROLS = (1 << 6),
	CLIENT = (1 << 7),
	FAKECLIENT = (1 << 8)
};

enum hitboxes
{
	HEAD,
	NECK,
	LOWER_NECK,
	PELVIS,
	BODY,
	THORAX,
	CHEST,
	UPPER_CHEST,
	RIGHT_THIGH,
	LEFT_THIGH,
	RIGHT_CALF,
	LEFT_CALF,
	RIGHT_FOOT,
	LEFT_FOOT,
	RIGHT_HAND,
	LEFT_HAND,
	RIGHT_UPPER_ARM,
	RIGHT_FOREARM,
	LEFT_UPPER_ARM,
	LEFT_FOREARM,
	MAX
};

enum surface_flags
{
	SURFACE = (1 << 0),
	WALKABLE = (1 << 1),
	BUILDABLE = (1 << 2),
	SURFPROP1 = (1 << 3),
	SURFPROP2 = (1 << 4),
};

enum trace_type
{
	EVERYTHING = 0,
	WORLD_ONLY,				// NOTE: This does *not* test static props!!!
	ENTITIES_ONLY,			// NOTE: This version will *not* test static props
	EVERYTHING_FILTER_PROPS,	// NOTE: This version will pass the IHandleEntity for props through the filter, unlike all other filters
};